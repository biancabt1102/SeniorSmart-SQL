/*
Integrantes da SeniorSmart

Andressa Vitória Regina Santos - RM93995
Bianca Barrancos Teixeira - RM92831
Gabriel Ferla Martins dos Anjos - RM93344
Gerson dos Reis de Melo - RM96210
Jefferson de Andrade Chaves - RM96236
*/

SET SERVEROUTPUT ON;
SET VERIFY OFF;

-- Função

-- Calcula o desconto do plano anual
-- CODIGO FUNCIONANDO 
-- TESTAR EXCEPTION

CREATE OR REPLACE FUNCTION FUNC_CALCULAR_DESCONTO_PLANO(V_CD_PLANO IN NUMBER, PERCENTUAL_DESCONTO IN NUMBER)
RETURN NUMBER 
IS
    VALOR_COM_DESCONTO NUMBER(10,2);
    V_VALOR_PLANO NUMBER(10,2);
    ERR_CODE NUMBER(4);
    ERR_MSG VARCHAR2(100);
    V_DATE_ERR DATE := SYSDATE;
BEGIN
    SELECT VL_PLANO_ANUAL INTO V_VALOR_PLANO FROM t_ss_plano
    WHERE CD_PLANO = V_CD_PLANO;
    
    VALOR_COM_DESCONTO := V_VALOR_PLANO * (1 - (PERCENTUAL_DESCONTO / 100));
    RETURN VALOR_COM_DESCONTO;
EXCEPTION 
    WHEN NO_DATA_FOUND THEN
        ERR_CODE := SQLCODE;
        ERR_MSG := SUBSTR(SQLERRM, 1, 100);
        
        INSERT INTO T_SS_ERRO(CD_ERRO, NM_ERRO, DT_OCORRENCIA, USUARIO)
        VALUES(ERR_CODE, ERR_MSG, V_DATE_ERR, USER);
        COMMIT;
        RETURN NULL;
    WHEN OTHERS THEN
        ERR_CODE := SQLCODE;
        ERR_MSG := SUBSTR(SQLERRM, 1, 100);
        
        INSERT INTO T_SS_ERRO(CD_ERRO, NM_ERRO, DT_OCORRENCIA, USUARIO)
        VALUES (ERR_CODE, ERR_MSG, V_DATE_ERR, USER);
        COMMIT;
        RETURN NULL;
END;

--SELECT FUNC_CALCULAR_DESCONTO_PLANO(6, 10) FROM DUAL;
--DBMS_OUTPUT.PUT_LINE(FUNC_CALCULAR_DESCONTO_PLANO(6, 10));


-- Calcula a idade do usuário
-- Código funcionando
-- TESTAR EXCEPTION

CREATE OR REPLACE FUNCTION FUNC_CALCULA_IDADE(V_CD_USUARIO IN NUMBER)
RETURN NUMBER
IS
    IDADE NUMBER(3);
    ERR_CODE NUMBER(4);
    ERR_MSG VARCHAR2(100);
    V_DATE_ERR DATE := SYSDATE;
BEGIN
    SELECT TRUNC(MONTHS_BETWEEN(SYSDATE, DT_NASCIMENTO) / 12) INTO IDADE FROM T_SS_USUARIO
    WHERE CD_USUARIO = V_CD_USUARIO;

    RETURN IDADE;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        ERR_CODE := SQLCODE;
        ERR_MSG := SUBSTR(SQLERRM, 1, 100);
    
        INSERT INTO T_SS_ERRO(CD_ERRO, NM_ERRO, DT_OCORRENCIA, USUARIO)
        VALUES (ERR_CODE, ERR_MSG, V_DATE_ERR, USER);
        COMMIT;
        RETURN NULL;

    WHEN OTHERS THEN
        ERR_CODE := SQLCODE;
        ERR_MSG := SUBSTR(SQLERRM, 1, 100);
    
        INSERT INTO T_SS_ERRO(CD_ERRO, NM_ERRO, DT_OCORRENCIA, USUARIO)
        VALUES(ERR_CODE, ERR_MSG, V_DATE_ERR, USER);
        COMMIT;
        RETURN NULL;

END;

SELECT FUNC_CALCULA_IDADE(1) FROM DUAL;

-- Procedure

-- Gerar relatório de usuários por plano
-- Criar mais uma exception
-- Código funcionando
-- Testar exception

CREATE OR REPLACE PROCEDURE relatorio_usuarios_por_plano
IS
    ERR_CODE NUMBER(4);
    ERR_MSG VARCHAR2(100);
    V_DATE_ERR DATE := SYSDATE;
    V_ID_USUARIO NUMBER(2);
    
CURSOR c_relatorio IS 
    SELECT p.DS_PLANO, u.NM_USUARIO, u.DT_NASCIMENTO, u.CD_USUARIO FROM T_SS_PLANO p
    JOIN T_SS_USUARIO u ON p.CD_PLANO = u.CD_PLANO
    ORDER BY p.DS_PLANO, u.NM_USUARIO;
    
BEGIN 
    FOR rec IN c_relatorio LOOP
        V_ID_USUARIO := rec.CD_USUARIO;
        DBMS_OUTPUT.PUT_LINE('Plano: ' || rec.DS_PLANO || ', Usuário' || rec.NM_USUARIO || ', Idade: '|| FUNC_CALCULA_IDADE(V_ID_USUARIO));
    END LOOP;

EXCEPTION
    WHEN OTHERS THEN
        ERR_CODE := SQLCODE;
        ERR_MSG := SUBSTR(SQLERRM, 1, 100);
        
        INSERT INTO T_SS_ERRO(CD_ERRO, NM_ERRO, DT_OCORRENCIA, USUARIO)
        VALUES(ERR_CODE, ERR_MSG, V_DATE_ERR, USER);
        COMMIT;
END relatorio_usuarios_por_plano;

EXEC relatorio_usuarios_por_plano;

-- Gerar relatório de pagamentos mensais
-- Criar mais uma exception
-- Código rodando
-- Testar EXCEPTION

CREATE OR REPLACE PROCEDURE relatorio_pagamentos_mensais 
IS
    ERR_CODE NUMBER(4);
    ERR_MSG VARCHAR2(100);
    V_DATE_ERR DATE := SYSDATE;
CURSOR c_relatorio IS
    SELECT u.NM_USUARIO, p.VL_PLANO_MENSAL FROM T_SS_USUARIO u
    JOIN T_SS_PLANO p ON u.CD_PLANO = p.CD_PLANO;
BEGIN
    FOR rec IN c_relatorio LOOP
        DBMS_OUTPUT.PUT_LINE('Usuário: ' || rec.NM_USUARIO || ', Pagamento mensal: R$' || rec.VL_PLANO_MENSAL);
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        ERR_CODE := SQLCODE;
        ERR_MSG := SUBSTR(SQLERRM, 1, 100);
        INSERT INTO T_SS_ERRO(CD_ERRO, NM_ERRO, DT_OCORRENCIA, USUARIO)
        VALUES(ERR_CODE, ERR_MSG, V_DATE_ERR, USER);
        COMMIT;
END relatorio_pagamentos_mensais;

EXEC relatorio_pagamentos_mensais;

-- Trigger

-- Monitorar atualização de valores
-- Trigger funcionando

CREATE OR REPLACE TRIGGER trg_monitorar_atualizacao
AFTER UPDATE ON T_SS_USUARIO 
FOR EACH ROW
DECLARE
    ERR_CODE NUMBER(4);
    ERR_MSG VARCHAR2(100);
    V_DATE_ERR DATE := SYSDATE;
BEGIN 
    INSERT INTO T_SS_LOG_ATUALIZACAO(CD_USUARIO, DT_ATUALIZACAO, VALOR_ANTIGO, VALOR_NOVO)
    VALUES (:OLD.CD_USUARIO, SYSDATE, :OLD.NR_TELEFONE, :NEW.NR_TELEFONE);
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ERR_CODE := SQLCODE;
        ERR_MSG := SUBSTR(SQLERRM, 1, 100);
        INSERT INTO T_SS_ERRO(CD_ERRO, NM_ERRO, DT_OCORRENCIA, USUARIO)
        VALUES(ERR_CODE, ERR_MSG, V_DATE_ERR, USER);
END;

--UPDATE T_SS_USUARIO SET NR_TELEFONE='069922612250' WHERE CD_USUARIO = 1;

